/* The following code was generated by JFlex 1.4.1 on 17.07.06 11:10 */

/*
 * JFlex specification file for PHP / generated Lexer
 * 
 * Copyright (C) 2005 Nenad Jovanovic
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License. See the file
 * COPYRIGHT for more information.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 */


package at.ac.tuwien.infosys.www.phpparser;

import java.util.*;
import java_cup.runtime.*;



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 17.07.06 11:10 from the specification file
 * <tt>src/spec/php.jflex</tt>
 */
public class PhpLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int ST_IN_SCRIPTING = 2;
  public static final int ST_LOOKING_FOR_PROPERTY = 12;
  public static final int ST_SINGLE_QUOTE = 6;
  public static final int ST_ONE_LINE_COMMENT = 18;
  public static final int ST_COMMENT = 16;
  public static final int ST_BACKQUOTE = 8;
  public static final int ST_DOUBLE_QUOTES = 4;
  public static final int YYINITIAL = 0;
  public static final int ST_HEREDOC = 10;
  public static final int ST_LOOKING_FOR_VARNAME = 14;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  6,  7,  7,  8,  8, 
     9,  9, 10, 10
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\12\1\14\2\0\1\11\22\0\1\12\1\53\1\76\1\13"+
    "\1\70\1\57\1\60\1\77\1\43\1\45\1\55\1\4\1\64\1\37"+
    "\1\2\1\56\1\5\7\102\2\1\1\41\1\63\1\54\1\52\1\40"+
    "\1\71\1\72\1\34\1\7\1\27\1\20\1\3\1\24\1\44\1\33"+
    "\1\16\1\47\1\35\1\22\1\51\1\26\1\21\1\36\1\50\1\31"+
    "\1\30\1\17\1\25\1\42\1\32\1\15\1\46\1\10\1\65\1\100"+
    "\1\66\1\62\1\23\1\101\1\34\1\7\1\27\1\20\1\3\1\24"+
    "\1\44\1\33\1\16\1\47\1\35\1\22\1\51\1\26\1\21\1\36"+
    "\1\50\1\31\1\75\1\17\1\25\1\42\1\32\1\6\1\46\1\10"+
    "\1\73\1\61\1\74\1\67\201\10\uff00\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\12\0\2\1\1\2\1\3\1\4\1\5\1\6"+
    "\1\3\3\5\1\7\1\10\16\5\1\11\1\12\1\13"+
    "\1\5\1\14\1\5\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\44\1\45\1\34\1\46"+
    "\1\47\1\50\1\2\2\45\1\51\1\2\1\45\1\52"+
    "\2\45\1\5\1\53\1\54\1\55\1\56\3\57\2\60"+
    "\2\57\1\0\2\60\1\1\1\61\1\0\1\62\6\5"+
    "\1\63\1\64\1\0\2\5\1\65\4\5\1\66\1\5"+
    "\1\67\20\5\1\70\2\5\1\71\1\72\1\73\1\74"+
    "\1\75\1\76\1\5\12\0\1\5\1\77\1\100\2\101"+
    "\1\102\1\103\1\0\1\104\1\105\1\106\1\107\1\110"+
    "\1\111\1\112\1\113\1\114\1\115\1\116\1\0\1\117"+
    "\4\0\1\72\1\120\1\121\1\122\3\123\1\0\2\124"+
    "\1\0\1\125\1\126\2\0\1\61\1\0\7\5\1\3"+
    "\1\127\5\5\1\130\5\5\1\131\2\5\1\132\1\133"+
    "\10\5\1\134\2\5\1\135\1\136\11\0\1\5\1\137"+
    "\1\140\1\141\2\0\2\107\1\44\2\123\2\0\1\5"+
    "\1\142\5\5\1\143\1\144\7\5\1\145\12\5\1\146"+
    "\7\5\11\0\1\5\4\0\2\5\1\147\4\5\1\150"+
    "\1\151\1\5\1\152\11\5\1\153\1\5\1\154\1\155"+
    "\4\5\1\156\1\157\1\160\3\0\1\161\7\0\1\5"+
    "\2\162\3\0\1\5\1\163\1\5\1\164\15\5\1\165"+
    "\1\166\1\167\1\5\2\0\1\170\5\0\1\171\1\0"+
    "\1\172\3\0\1\173\4\5\1\174\1\175\1\176\5\5"+
    "\1\177\2\5\1\200\3\0\1\201\1\0\1\202\3\0"+
    "\3\5\1\203\2\5\1\204\1\205\2\5\1\206\1\207"+
    "\1\5\1\210\1\211\3\0\2\5\1\212\3\5\1\213"+
    "\1\5\2\0\1\214\1\215\4\5\2\0\4\5\2\0"+
    "\1\216\1\217\1\220\1\221\12\0\1\222\3\0\2\222"+
    "\10\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[488];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\103\0\206\0\311\0\u010c\0\u014f\0\u0192\0\u01d5"+
    "\0\u0218\0\u025b\0\u029e\0\u02e1\0\u0324\0\u0367\0\u03aa\0\u03ed"+
    "\0\u0430\0\u0473\0\u04b6\0\u04f9\0\u053c\0\u057f\0\u05c2\0\u0367"+
    "\0\u0605\0\u0648\0\u068b\0\u06ce\0\u0711\0\u0754\0\u0797\0\u07da"+
    "\0\u081d\0\u0860\0\u08a3\0\u08e6\0\u0929\0\u096c\0\u09af\0\u09f2"+
    "\0\u0a35\0\u0a78\0\u0abb\0\u0afe\0\u0367\0\u0b41\0\u0b84\0\u0bc7"+
    "\0\u0c0a\0\u0c4d\0\u0c90\0\u0cd3\0\u0d16\0\u0d59\0\u0367\0\u0367"+
    "\0\u0367\0\u0367\0\u0367\0\u0d9c\0\u0ddf\0\u0367\0\u0367\0\u0367"+
    "\0\u0e22\0\u0e65\0\u0367\0\u0ea8\0\u0eeb\0\u0f2e\0\u0f71\0\u0fb4"+
    "\0\u0ff7\0\u0367\0\u0367\0\u103a\0\u107d\0\u10c0\0\u0367\0\u1103"+
    "\0\u1146\0\u0367\0\u1189\0\u11cc\0\u120f\0\u0367\0\u1252\0\u0367"+
    "\0\u1295\0\u12d8\0\u131b\0\u135e\0\u13a1\0\u0367\0\u0367\0\u13e4"+
    "\0\u1427\0\u146a\0\u14ad\0\u14f0\0\u1533\0\u1576\0\u0367\0\u15b9"+
    "\0\u15fc\0\u163f\0\u1682\0\u16c5\0\u1708\0\u0367\0\u0367\0\u174b"+
    "\0\u178e\0\u17d1\0\u057f\0\u1814\0\u1857\0\u189a\0\u18dd\0\u057f"+
    "\0\u1920\0\u057f\0\u1963\0\u19a6\0\u19e9\0\u1a2c\0\u1a6f\0\u1ab2"+
    "\0\u1af5\0\u1b38\0\u1b7b\0\u1bbe\0\u1c01\0\u1c44\0\u1c87\0\u1cca"+
    "\0\u1d0d\0\u1d50\0\u057f\0\u1d93\0\u1dd6\0\u0367\0\u0367\0\u0367"+
    "\0\u1e19\0\u0367\0\u0367\0\u1e5c\0\u1e9f\0\u0abb\0\u1ee2\0\u1f25"+
    "\0\u1f68\0\u1fab\0\u1fee\0\u2031\0\u2074\0\u20b7\0\u20fa\0\u0367"+
    "\0\u213d\0\u2180\0\u0367\0\u0367\0\u21c3\0\u2206\0\u0367\0\u0367"+
    "\0\u0367\0\u2249\0\u0367\0\u0367\0\u0367\0\u0367\0\u0367\0\u0367"+
    "\0\u228c\0\u0e22\0\u0367\0\u22cf\0\u0e65\0\u2312\0\u2355\0\u0eeb"+
    "\0\u0367\0\u0367\0\u0367\0\u0367\0\u2398\0\u23db\0\u241e\0\u2461"+
    "\0\u0367\0\u24a4\0\u0367\0\u0367\0\u24e7\0\u252a\0\u256d\0\u256d"+
    "\0\u25b0\0\u25f3\0\u2636\0\u2679\0\u26bc\0\u26ff\0\u2742\0\u174b"+
    "\0\u057f\0\u2785\0\u27c8\0\u280b\0\u284e\0\u2891\0\u057f\0\u28d4"+
    "\0\u2917\0\u295a\0\u299d\0\u29e0\0\u2a23\0\u2a66\0\u2aa9\0\u057f"+
    "\0\u057f\0\u2aec\0\u2b2f\0\u2b72\0\u2bb5\0\u2bf8\0\u2c3b\0\u2c7e"+
    "\0\u2cc1\0\u057f\0\u2d04\0\u2d47\0\u0367\0\u057f\0\u2d8a\0\u2dcd"+
    "\0\u2e10\0\u2e53\0\u2e96\0\u2ed9\0\u2f1c\0\u2f5f\0\u2fa2\0\u2fe5"+
    "\0\u0367\0\u0367\0\u0367\0\u3028\0\u306b\0\u30ae\0\u0367\0\u2355"+
    "\0\u30f1\0\u3134\0\u3177\0\u31ba\0\u31fd\0\u3240\0\u3283\0\u32c6"+
    "\0\u3309\0\u334c\0\u338f\0\u057f\0\u057f\0\u33d2\0\u3415\0\u3458"+
    "\0\u349b\0\u34de\0\u3521\0\u3564\0\u057f\0\u35a7\0\u35ea\0\u362d"+
    "\0\u3670\0\u36b3\0\u36f6\0\u3739\0\u377c\0\u37bf\0\u3802\0\u057f"+
    "\0\u3845\0\u3888\0\u38cb\0\u390e\0\u3951\0\u3994\0\u39d7\0\u3a1a"+
    "\0\u3a5d\0\u3aa0\0\u3ae3\0\u3b26\0\u3b69\0\u3bac\0\u3bef\0\u3c32"+
    "\0\u3c75\0\u3cb8\0\u3cfb\0\u3d3e\0\u3d81\0\u3dc4\0\u3e07\0\u057f"+
    "\0\u3e4a\0\u3e8d\0\u3ed0\0\u3f13\0\u057f\0\u057f\0\u3f56\0\u057f"+
    "\0\u3f99\0\u3fdc\0\u401f\0\u4062\0\u40a5\0\u40e8\0\u412b\0\u416e"+
    "\0\u41b1\0\u057f\0\u41f4\0\u057f\0\u057f\0\u4237\0\u427a\0\u42bd"+
    "\0\u4300\0\u057f\0\u057f\0\u057f\0\u4343\0\u4386\0\u43c9\0\u0367"+
    "\0\u440c\0\u444f\0\u4492\0\u44d5\0\u4518\0\u455b\0\u459e\0\u45e1"+
    "\0\u4624\0\u0367\0\u4667\0\u46aa\0\u46ed\0\u4730\0\u057f\0\u4773"+
    "\0\u47b6\0\u47f9\0\u483c\0\u487f\0\u48c2\0\u4905\0\u4948\0\u498b"+
    "\0\u49ce\0\u4a11\0\u4a54\0\u4a97\0\u4ada\0\u4b1d\0\u057f\0\u057f"+
    "\0\u057f\0\u4b60\0\u4ba3\0\u4be6\0\u0367\0\u4c29\0\u4c6c\0\u4caf"+
    "\0\u4cf2\0\u4d35\0\u0367\0\u4d78\0\u057f\0\u4dbb\0\u4dfe\0\u4e41"+
    "\0\u057f\0\u4e84\0\u4ec7\0\u4f0a\0\u4f4d\0\u4f90\0\u057f\0\u057f"+
    "\0\u4fd3\0\u5016\0\u5059\0\u509c\0\u50df\0\u057f\0\u5122\0\u5165"+
    "\0\u51a8\0\u51eb\0\u522e\0\u5271\0\u0367\0\u52b4\0\u0367\0\u52f7"+
    "\0\u533a\0\u537d\0\u53c0\0\u5403\0\u5446\0\u057f\0\u5489\0\u54cc"+
    "\0\u057f\0\u057f\0\u550f\0\u5552\0\u057f\0\u057f\0\u5595\0\u0367"+
    "\0\u0367\0\u55d8\0\u561b\0\u565e\0\u56a1\0\u56e4\0\u057f\0\u5727"+
    "\0\u576a\0\u57ad\0\u057f\0\u57f0\0\u5833\0\u5876\0\u057f\0\u057f"+
    "\0\u58b9\0\u58fc\0\u593f\0\u5982\0\u59c5\0\u5a08\0\u5a4b\0\u5a8e"+
    "\0\u5ad1\0\u5b14\0\u5b57\0\u5b9a\0\u057f\0\u057f\0\u057f\0\u057f"+
    "\0\u5bdd\0\u5c20\0\u5c63\0\u5ca6\0\u5ce9\0\u5d2c\0\u5d6f\0\u5db2"+
    "\0\u5df5\0\u5e38\0\u5e7b\0\u5ebe\0\u5f01\0\u5f44\0\u5f87\0\u0367"+
    "\0\u5fca\0\u600d\0\u6050\0\u6093\0\u60d6\0\u6119\0\u615c\0\u619f";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[488];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\54\14\1\15\26\14\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\2\27\1\30\1\27\1\24"+
    "\1\31\1\26\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\26\1\45\1\26"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\4\26\1\56\1\57\1\60\1\61\1\62\1\63\1\64"+
    "\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74"+
    "\1\75\1\76\1\77\1\100\1\42\1\101\1\102\1\16"+
    "\1\103\1\17\1\16\1\104\1\105\1\26\1\105\1\106"+
    "\3\26\4\105\22\26\1\107\2\105\1\26\1\105\1\26"+
    "\1\105\4\26\13\105\1\71\1\72\1\105\1\110\2\105"+
    "\1\111\1\112\1\26\1\113\1\105\1\114\1\115\1\104"+
    "\77\116\1\117\1\120\2\116\1\16\1\104\1\105\1\26"+
    "\1\105\1\106\3\26\4\105\22\26\1\107\2\105\1\26"+
    "\1\105\1\26\1\105\4\26\13\105\1\71\1\72\1\105"+
    "\1\110\2\105\1\111\1\112\1\26\1\121\1\105\1\114"+
    "\1\122\1\104\1\16\1\104\1\105\1\26\1\105\1\106"+
    "\3\26\4\105\22\26\1\107\2\105\1\26\1\105\1\26"+
    "\1\105\4\26\13\105\1\71\1\72\1\105\1\110\2\105"+
    "\1\111\1\112\1\26\1\123\1\124\1\114\1\123\1\104"+
    "\1\16\1\104\1\105\1\125\1\105\1\106\3\125\4\105"+
    "\22\125\1\107\2\105\1\125\1\105\1\125\1\105\4\125"+
    "\13\105\1\71\1\72\1\105\1\110\2\105\1\111\1\112"+
    "\1\125\1\123\1\124\1\114\1\123\1\104\3\126\1\127"+
    "\2\126\3\127\4\126\22\127\3\126\1\127\1\126\1\127"+
    "\1\126\4\127\23\126\1\127\5\126\3\130\1\131\2\130"+
    "\3\131\4\130\22\131\3\130\1\131\1\130\1\131\1\130"+
    "\4\131\23\130\1\131\5\130\55\132\1\133\25\132\11\134"+
    "\1\135\2\134\1\136\23\134\1\137\16\134\1\140\11\134"+
    "\1\140\11\134\54\14\1\141\102\14\1\0\2\14\1\142"+
    "\11\14\1\143\3\14\1\144\5\14\104\0\1\17\1\145"+
    "\1\146\1\0\1\17\74\0\1\17\1\0\1\145\3\0"+
    "\1\145\44\0\1\147\27\0\1\145\1\0\1\26\1\0"+
    "\1\26\1\0\1\26\1\150\2\26\4\0\1\150\4\26"+
    "\1\151\3\26\1\152\1\153\7\26\3\0\1\154\1\0"+
    "\1\26\1\0\3\26\1\155\23\0\1\26\4\0\1\26"+
    "\4\0\1\156\45\0\1\157\31\0\1\17\1\145\1\146"+
    "\1\0\1\17\1\160\73\0\1\17\1\0\1\26\1\0"+
    "\1\26\1\0\4\26\4\0\4\26\1\161\15\26\3\0"+
    "\1\26\1\0\1\26\1\0\4\26\23\0\1\26\4\0"+
    "\1\26\1\0\1\26\1\0\1\26\1\0\4\26\4\0"+
    "\14\26\1\162\5\26\3\0\1\26\1\0\1\26\1\0"+
    "\4\26\23\0\1\26\4\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\4\26\4\0\22\26\3\0\1\26\1\0"+
    "\1\26\1\0\4\26\23\0\1\26\4\0\1\26\11\0"+
    "\2\27\1\0\1\27\67\0\1\26\1\0\1\26\1\0"+
    "\4\26\4\0\7\26\1\163\1\26\1\164\1\26\1\165"+
    "\6\26\3\0\1\26\1\0\1\26\1\0\4\26\23\0"+
    "\1\165\4\0\1\26\1\0\1\26\1\0\1\166\1\0"+
    "\4\26\4\0\1\26\1\167\2\26\1\170\15\26\3\0"+
    "\1\26\1\0\1\26\1\0\4\26\23\0\1\26\4\0"+
    "\1\26\1\0\1\26\1\0\1\26\1\0\4\26\4\0"+
    "\5\26\1\171\6\26\1\172\5\26\3\0\1\26\1\0"+
    "\1\26\1\0\4\26\23\0\1\26\4\0\1\26\1\0"+
    "\1\26\1\0\1\26\1\0\4\26\4\0\1\26\1\173"+
    "\20\26\3\0\1\26\1\0\1\26\1\0\4\26\23\0"+
    "\1\26\4\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\4\26\4\0\6\26\1\174\13\26\3\0\1\26\1\0"+
    "\1\26\1\0\4\26\23\0\1\26\4\0\1\26\1\0"+
    "\1\26\1\0\1\26\1\0\4\26\4\0\4\26\1\175"+
    "\3\26\1\176\11\26\3\0\1\26\1\0\1\26\1\0"+
    "\4\26\23\0\1\26\4\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\4\26\4\0\11\26\1\177\1\26\1\200"+
    "\6\26\3\0\1\26\1\0\1\26\1\0\4\26\23\0"+
    "\1\200\4\0\1\26\1\0\1\26\1\0\1\201\1\0"+
    "\4\26\4\0\22\26\3\0\1\26\1\0\1\26\1\0"+
    "\4\26\23\0\1\26\4\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\4\26\4\0\4\26\1\202\1\203\1\26"+
    "\1\204\7\26\1\205\2\26\3\0\1\26\1\0\1\26"+
    "\1\0\4\26\23\0\1\26\4\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\4\26\4\0\2\26\1\206\12\26"+
    "\1\207\4\26\3\0\1\26\1\0\1\26\1\0\4\26"+
    "\23\0\1\26\4\0\1\26\1\0\1\26\1\0\1\210"+
    "\1\0\4\26\4\0\22\26\3\0\1\26\1\0\1\26"+
    "\1\0\4\26\23\0\1\26\4\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\4\26\4\0\16\26\1\211\3\26"+
    "\3\0\1\26\1\0\1\26\1\0\4\26\23\0\1\26"+
    "\4\0\1\26\1\0\1\26\1\0\1\26\1\0\4\26"+
    "\4\0\11\26\1\212\1\26\1\213\1\214\5\26\3\0"+
    "\1\26\1\0\1\26\1\0\4\26\23\0\1\213\4\0"+
    "\1\26\1\0\1\26\1\0\1\26\1\0\4\26\4\0"+
    "\14\26\1\215\5\26\3\0\1\26\1\0\1\26\1\0"+
    "\4\26\23\0\1\26\4\0\1\26\37\0\1\216\1\217"+
    "\11\0\1\220\70\0\1\221\11\0\1\222\71\0\1\223"+
    "\42\0\1\26\1\0\1\26\1\0\4\26\4\0\17\26"+
    "\1\224\2\26\3\0\1\26\1\0\1\26\1\0\4\26"+
    "\23\0\1\26\4\0\1\26\7\0\1\225\2\0\1\226"+
    "\3\0\1\227\1\0\1\230\1\231\2\0\1\232\1\233"+
    "\2\0\1\234\1\235\2\0\1\236\40\0\1\234\6\0"+
    "\1\26\1\0\1\26\1\0\4\26\4\0\5\26\1\237"+
    "\14\26\3\0\1\26\1\0\1\26\1\0\4\26\23\0"+
    "\1\26\4\0\1\26\40\0\1\240\11\0\1\241\102\0"+
    "\1\242\70\0\1\243\11\0\1\244\1\0\1\245\1\0"+
    "\1\246\76\0\1\247\102\0\1\250\2\0\1\251\1\30"+
    "\64\0\1\252\11\0\1\253\102\0\1\254\5\0\1\255"+
    "\74\0\1\256\6\0\1\257\73\0\1\260\33\0\1\261"+
    "\2\0\3\261\4\0\22\261\3\0\1\261\1\0\1\261"+
    "\1\0\4\261\23\0\1\261\45\0\1\252\42\0\70\262"+
    "\1\0\5\262\1\263\1\262\1\264\2\262\77\265\1\263"+
    "\1\266\2\265\1\0\1\104\3\0\1\104\74\0\1\104"+
    "\2\0\1\105\1\0\1\105\4\0\4\105\22\0\3\105"+
    "\1\0\1\105\1\0\1\105\4\0\13\105\2\0\1\105"+
    "\1\0\2\105\4\0\1\105\4\0\1\104\3\0\1\104"+
    "\1\267\73\0\1\104\2\0\1\105\1\0\1\105\4\0"+
    "\4\105\22\0\1\105\1\270\1\105\1\0\1\105\1\0"+
    "\1\105\4\0\13\105\2\0\1\105\1\0\2\105\4\0"+
    "\1\105\3\0\3\271\1\261\2\271\3\261\4\271\22\261"+
    "\3\271\1\261\1\271\1\261\1\271\4\261\21\271\1\272"+
    "\1\271\1\261\5\271\70\0\1\273\12\0\5\274\1\275"+
    "\1\276\6\274\1\276\64\274\1\275\101\0\1\115\1\0"+
    "\77\116\1\0\1\277\101\116\2\274\2\116\76\0\1\121"+
    "\102\0\2\123\1\0\1\123\3\0\1\105\1\0\1\105"+
    "\4\0\4\105\22\0\3\105\1\0\1\105\1\0\1\105"+
    "\4\0\13\105\2\0\1\105\1\0\2\105\3\0\1\123"+
    "\1\124\1\0\1\123\2\0\1\125\1\0\1\125\1\0"+
    "\4\125\1\300\2\0\1\301\22\125\3\0\1\125\1\0"+
    "\1\125\1\0\4\125\11\0\1\302\11\0\1\125\4\0"+
    "\1\125\1\0\1\127\1\0\1\127\1\0\4\127\4\0"+
    "\22\127\3\0\1\127\1\0\1\127\1\0\4\127\23\0"+
    "\1\127\4\0\1\127\1\0\1\131\1\0\1\131\1\0"+
    "\4\131\4\0\22\131\3\0\1\131\1\0\1\131\1\0"+
    "\4\131\23\0\1\131\4\0\1\131\55\132\1\0\25\132"+
    "\56\0\1\136\24\0\11\134\1\0\2\134\1\0\23\134"+
    "\1\0\16\134\1\0\11\134\1\0\11\134\14\0\1\136"+
    "\126\0\1\303\42\0\54\14\1\0\2\14\1\0\11\14"+
    "\1\0\3\14\1\0\5\14\52\0\1\304\66\0\1\305"+
    "\13\0\1\304\57\0\1\306\54\0\1\145\1\0\1\146"+
    "\1\0\1\145\74\0\1\145\1\0\1\307\2\0\1\310"+
    "\1\307\31\0\1\310\42\0\1\307\1\0\1\26\1\0"+
    "\1\26\1\0\4\26\4\0\1\26\1\311\1\312\17\26"+
    "\3\0\1\26\1\0\1\26\1\0\4\26\23\0\1\26"+
    "\4\0\1\26\1\0\1\26\1\0\1\26\1\0\4\26"+
    "\4\0\13\26\1\313\6\26\3\0\1\26\1\0\1\26"+
    "\1\0\4\26\23\0\1\313\4\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\4\26\4\0\3\26\1\314\16\26"+
    "\3\0\1\26\1\0\1\26\1\0\4\26\23\0\1\26"+
    "\4\0\1\26\1\0\1\26\1\0\1\26\1\0\4\26"+
    "\4\0\16\26\1\315\3\26\3\0\1\26\1\0\1\26"+
    "\1\0\4\26\23\0\1\26\4\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\4\26\4\0\17\26\1\316\2\26"+
    "\3\0\1\26\1\0\1\26\1\0\4\26\23\0\1\26"+
    "\4\0\1\26\1\0\1\26\1\0\1\26\1\0\4\26"+
    "\4\0\21\26\1\317\3\0\1\26\1\0\1\26\1\0"+
    "\4\26\23\0\1\26\4\0\1\26\1\0\1\320\1\0"+
    "\1\320\1\0\1\320\1\0\1\320\10\0\1\320\3\0"+
    "\1\320\2\0\1\320\4\0\1\320\45\0\1\320\1\0"+
    "\1\26\1\0\1\26\1\0\4\26\4\0\14\26\1\321"+
    "\5\26\3\0\1\26\1\0\1\26\1\0\4\26\23\0"+
    "\1\26\4\0\1\26\1\0\1\26\1\0\1\322\1\0"+
    "\4\26\4\0\22\26\3\0\1\26\1\0\1\26\1\0"+
    "\4\26\23\0\1\26\4\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\4\26\4\0\12\26\1\323\7\26\3\0"+
    "\1\26\1\0\1\26\1\0\4\26\23\0\1\26\4\0"+
    "\1\26\1\0\1\26\1\0\1\26\1\0\4\26\4\0"+
    "\13\26\1\324\6\26\3\0\1\26\1\0\1\26\1\0"+
    "\4\26\23\0\1\324\4\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\4\26\4\0\7\26\1\325\2\26\1\326"+
    "\7\26\3\0\1\26\1\0\1\26\1\0\4\26\23\0"+
    "\1\26\4\0\1\26\1\0\1\26\1\0\1\327\1\0"+
    "\4\26\4\0\22\26\3\0\1\26\1\0\1\26\1\0"+
    "\4\26\23\0\1\26\4\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\4\26\4\0\3\26\1\330\16\26\3\0"+
    "\1\26\1\0\1\26\1\0\4\26\23\0\1\26\4\0"+
    "\1\26\1\0\1\26\1\0\1\26\1\0\4\26\4\0"+
    "\13\26\1\331\6\26\3\0\1\26\1\0\1\26\1\0"+
    "\4\26\23\0\1\331\4\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\4\26\4\0\5\26\1\332\1\26\1\333"+
    "\2\26\1\334\7\26\3\0\1\26\1\0\1\26\1\0"+
    "\4\26\23\0\1\26\4\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\4\26\4\0\14\26\1\335\5\26\3\0"+
    "\1\26\1\0\1\26\1\0\4\26\23\0\1\26\4\0"+
    "\1\26\1\0\1\26\1\0\1\26\1\0\4\26\4\0"+
    "\11\26\1\336\10\26\3\0\1\26\1\0\1\26\1\0"+
    "\4\26\23\0\1\26\4\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\4\26\4\0\13\26\1\337\6\26\3\0"+
    "\1\26\1\0\1\26\1\0\4\26\23\0\1\337\4\0"+
    "\1\26\1\0\1\26\1\0\1\340\1\0\4\26\4\0"+
    "\22\26\3\0\1\26\1\0\1\26\1\0\4\26\23\0"+
    "\1\26\4\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\4\26\4\0\15\26\1\341\4\26\3\0\1\26\1\0"+
    "\1\26\1\0\4\26\23\0\1\26\4\0\1\26\1\0"+
    "\1\26\1\0\1\26\1\0\4\26\4\0\11\26\1\342"+
    "\10\26\3\0\1\26\1\0\1\26\1\0\4\26\23\0"+
    "\1\26\4\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\4\26\4\0\17\26\1\343\2\26\3\0\1\26\1\0"+
    "\1\26\1\0\4\26\23\0\1\26\4\0\1\26\1\0"+
    "\1\26\1\0\1\26\1\0\4\26\4\0\10\26\1\176"+
    "\11\26\3\0\1\26\1\0\1\26\1\0\4\26\23\0"+
    "\1\26\4\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\4\26\4\0\13\26\1\344\6\26\3\0\1\26\1\0"+
    "\1\26\1\0\4\26\23\0\1\344\4\0\1\26\1\0"+
    "\1\26\1\0\1\26\1\0\4\26\4\0\17\26\1\345"+
    "\2\26\3\0\1\26\1\0\1\26\1\0\4\26\23\0"+
    "\1\26\4\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\4\26\4\0\1\26\1\346\20\26\3\0\1\26\1\0"+
    "\1\26\1\0\4\26\23\0\1\26\4\0\1\26\1\0"+
    "\1\26\1\0\1\26\1\0\4\26\4\0\2\26\1\347"+
    "\17\26\3\0\1\26\1\0\1\26\1\0\2\26\1\350"+
    "\1\26\23\0\1\26\4\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\4\26\4\0\1\26\1\351\20\26\3\0"+
    "\1\26\1\0\1\26\1\0\4\26\23\0\1\26\4\0"+
    "\1\26\1\0\1\26\1\0\1\26\1\0\4\26\4\0"+
    "\3\26\1\352\16\26\3\0\1\26\1\0\1\26\1\0"+
    "\4\26\23\0\1\26\4\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\4\26\4\0\14\26\1\353\5\26\3\0"+
    "\1\26\1\0\1\26\1\0\4\26\23\0\1\26\4\0"+
    "\1\26\1\0\1\26\1\0\1\26\1\0\4\26\4\0"+
    "\1\26\1\354\20\26\3\0\1\26\1\0\1\26\1\0"+
    "\4\26\23\0\1\26\4\0\1\26\52\0\1\355\31\0"+
    "\1\26\1\0\1\26\1\0\4\26\4\0\14\26\1\356"+
    "\5\26\3\0\1\26\1\0\1\26\1\0\4\26\23\0"+
    "\1\26\4\0\1\26\21\0\1\357\107\0\1\360\75\0"+
    "\1\361\70\0\1\362\115\0\1\363\106\0\1\364\73\0"+
    "\1\365\66\0\1\366\130\0\1\367\52\0\1\26\1\0"+
    "\1\26\1\0\4\26\4\0\4\26\1\370\15\26\3\0"+
    "\1\26\1\0\1\26\1\0\4\26\23\0\1\26\4\0"+
    "\1\26\52\0\1\371\102\0\1\372\102\0\1\373\1\0"+
    "\1\374\56\0\1\375\44\0\1\375\16\0\1\376\2\0"+
    "\1\377\67\0\1\261\1\0\1\261\1\0\4\261\4\0"+
    "\22\261\3\0\1\261\1\0\1\261\1\0\4\261\23\0"+
    "\1\261\4\0\1\261\14\262\1\0\66\262\14\265\1\0"+
    "\66\265\1\0\1\u0100\1\0\1\u0100\1\0\1\u0100\1\0"+
    "\1\u0100\10\0\1\u0100\3\0\1\u0100\2\0\1\u0100\4\0"+
    "\1\u0100\45\0\1\u0100\5\0\1\u0101\74\0\1\u0101\1\0"+
    "\1\u0102\1\0\1\u0102\1\0\1\u0102\1\0\1\u0102\10\0"+
    "\1\u0102\3\0\1\u0102\2\0\1\u0102\4\0\1\u0102\45\0"+
    "\1\u0102\77\116\2\0\2\116\14\0\1\301\77\0\1\300"+
    "\2\0\1\301\121\0\1\u0103\100\0\1\u0104\52\0\1\307"+
    "\3\0\1\307\74\0\1\307\1\0\1\26\1\0\1\26"+
    "\1\0\4\26\4\0\2\26\1\327\17\26\3\0\1\26"+
    "\1\0\1\26\1\0\4\26\23\0\1\26\4\0\1\26"+
    "\1\0\1\26\1\0\1\u0105\1\0\4\26\4\0\22\26"+
    "\3\0\1\26\1\0\1\26\1\0\4\26\23\0\1\26"+
    "\4\0\1\26\1\0\1\26\1\0\1\u0106\1\0\4\26"+
    "\4\0\22\26\3\0\1\26\1\0\1\26\1\0\4\26"+
    "\23\0\1\26\4\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\4\26\4\0\1\26\1\u0107\1\26\1\u0108\3\26"+
    "\1\u0109\3\26\1\u010a\1\26\1\u010b\4\26\3\0\1\26"+
    "\1\0\1\26\1\0\4\26\23\0\1\u010a\4\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\4\26\4\0\4\26"+
    "\1\u010c\15\26\3\0\1\26\1\0\1\26\1\0\4\26"+
    "\23\0\1\26\4\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\4\26\4\0\5\26\1\u010d\14\26\3\0\1\26"+
    "\1\0\1\26\1\0\4\26\23\0\1\26\4\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\4\26\4\0\2\26"+
    "\1\u010e\17\26\3\0\1\26\1\0\1\26\1\0\4\26"+
    "\23\0\1\26\4\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\4\26\4\0\17\26\1\u010f\2\26\3\0\1\26"+
    "\1\0\1\26\1\0\4\26\23\0\1\26\4\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\4\26\4\0\5\26"+
    "\1\u0110\14\26\3\0\1\26\1\0\1\26\1\0\4\26"+
    "\23\0\1\26\4\0\1\26\1\0\1\26\1\0\1\u0111"+
    "\1\0\4\26\4\0\22\26\3\0\1\26\1\0\1\26"+
    "\1\0\4\26\23\0\1\26\4\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\4\26\4\0\17\26\1\u0112\2\26"+
    "\3\0\1\26\1\0\1\26\1\0\4\26\23\0\1\26"+
    "\4\0\1\26\1\0\1\26\1\0\1\26\1\0\4\26"+
    "\4\0\5\26\1\u0113\14\26\3\0\1\26\1\0\1\26"+
    "\1\0\4\26\23\0\1\26\4\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\4\26\4\0\6\26\1\u0114\13\26"+
    "\3\0\1\26\1\0\1\26\1\0\4\26\23\0\1\26"+
    "\4\0\1\26\1\0\1\26\1\0\1\26\1\0\4\26"+
    "\4\0\2\26\1\u0115\17\26\3\0\1\26\1\0\1\26"+
    "\1\0\4\26\23\0\1\26\4\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\4\26\4\0\1\26\1\u0116\20\26"+
    "\3\0\1\26\1\0\1\26\1\0\4\26\23\0\1\26"+
    "\4\0\1\26\1\0\1\26\1\0\1\26\1\0\4\26"+
    "\4\0\1\26\1\u0117\6\26\1\u0118\11\26\3\0\1\26"+
    "\1\0\1\26\1\0\4\26\23\0\1\26\4\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\4\26\4\0\5\26"+
    "\1\u0119\14\26\3\0\1\26\1\0\1\26\1\0\4\26"+
    "\23\0\1\26\4\0\1\26\1\0\1\26\1\0\1\u011a"+
    "\1\0\4\26\4\0\22\26\3\0\1\26\1\0\1\26"+
    "\1\0\4\26\23\0\1\26\4\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\4\26\4\0\12\26\1\u011b\7\26"+
    "\3\0\1\26\1\0\1\26\1\0\4\26\23\0\1\26"+
    "\4\0\1\26\1\0\1\26\1\0\1\u011c\1\0\4\26"+
    "\4\0\22\26\3\0\1\26\1\0\1\26\1\0\4\26"+
    "\23\0\1\26\4\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\4\26\4\0\2\26\1\u011d\10\26\1\u011e\6\26"+
    "\3\0\1\26\1\0\1\26\1\0\4\26\23\0\1\u011e"+
    "\4\0\1\26\1\0\1\26\1\0\1\26\1\0\4\26"+
    "\4\0\13\26\1\u011f\6\26\3\0\1\26\1\0\1\26"+
    "\1\0\4\26\23\0\1\u011f\4\0\1\26\1\0\1\26"+
    "\1\0\1\u0120\1\0\4\26\4\0\22\26\3\0\1\26"+
    "\1\0\1\26\1\0\4\26\23\0\1\26\4\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\4\26\4\0\2\26"+
    "\1\u0121\17\26\3\0\1\26\1\0\1\26\1\0\4\26"+
    "\23\0\1\26\4\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\4\26\4\0\2\26\1\u0122\17\26\3\0\1\26"+
    "\1\0\1\26\1\0\4\26\23\0\1\26\4\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\4\26\4\0\10\26"+
    "\1\u0123\11\26\3\0\1\26\1\0\1\26\1\0\4\26"+
    "\23\0\1\26\4\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\4\26\4\0\10\26\1\u0124\11\26\3\0\1\26"+
    "\1\0\1\26\1\0\4\26\23\0\1\26\4\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\4\26\4\0\5\26"+
    "\1\u0125\14\26\3\0\1\26\1\0\1\26\1\0\4\26"+
    "\23\0\1\26\4\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\4\26\4\0\17\26\1\u0126\2\26\3\0\1\26"+
    "\1\0\1\26\1\0\4\26\23\0\1\26\4\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\4\26\4\0\11\26"+
    "\1\u0127\10\26\3\0\1\26\1\0\1\26\1\0\4\26"+
    "\23\0\1\26\4\0\1\26\21\0\1\u0128\100\0\1\u0129"+
    "\110\0\1\u012a\124\0\1\u012b\54\0\1\u012c\111\0\1\u012d"+
    "\44\0\1\u012d\36\0\1\u012e\105\0\1\u012f\77\0\1\u0130"+
    "\52\0\1\26\1\0\1\26\1\0\2\26\1\u0131\1\26"+
    "\4\0\22\26\3\0\1\26\1\0\1\26\1\0\4\26"+
    "\23\0\1\26\4\0\1\26\3\0\1\u0132\2\0\3\u0132"+
    "\1\0\1\374\2\0\22\u0132\3\0\1\u0132\1\0\1\u0132"+
    "\1\0\4\u0132\23\0\1\u0132\34\0\1\u0133\67\0\1\377"+
    "\73\0\1\274\74\0\1\274\1\0\1\274\1\0\1\274"+
    "\1\0\1\274\1\0\1\274\10\0\1\274\3\0\1\274"+
    "\2\0\1\274\4\0\1\274\45\0\1\274\36\0\1\u0134"+
    "\62\0\1\u0135\65\0\1\26\1\0\1\26\1\0\4\26"+
    "\4\0\11\26\1\u0136\10\26\3\0\1\26\1\0\1\26"+
    "\1\0\4\26\23\0\1\26\4\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\4\26\4\0\1\26\1\u0137\20\26"+
    "\3\0\1\26\1\0\1\26\1\0\4\26\23\0\1\26"+
    "\4\0\1\26\1\0\1\26\1\0\1\26\1\0\4\26"+
    "\4\0\7\26\1\u0138\12\26\3\0\1\26\1\0\1\26"+
    "\1\0\4\26\23\0\1\26\4\0\1\26\1\0\1\26"+
    "\1\0\1\u0139\1\0\4\26\4\0\22\26\3\0\1\26"+
    "\1\0\1\26\1\0\4\26\23\0\1\26\4\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\4\26\4\0\4\26"+
    "\1\u013a\15\26\3\0\1\26\1\0\1\26\1\0\4\26"+
    "\23\0\1\26\4\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\4\26\4\0\15\26\1\u013b\4\26\3\0\1\26"+
    "\1\0\1\26\1\0\4\26\23\0\1\26\4\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\4\26\4\0\16\26"+
    "\1\u013c\3\26\3\0\1\26\1\0\1\26\1\0\4\26"+
    "\23\0\1\26\4\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\4\26\4\0\22\26\3\0\1\26\1\0\1\26"+
    "\1\0\1\u013d\3\26\23\0\1\26\4\0\1\26\1\0"+
    "\1\26\1\0\1\26\1\0\4\26\4\0\20\26\1\u013e"+
    "\1\26\3\0\1\26\1\0\1\26\1\0\4\26\23\0"+
    "\1\26\4\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\4\26\4\0\10\26\1\u013f\11\26\3\0\1\26\1\0"+
    "\1\26\1\0\4\26\23\0\1\26\4\0\1\26\1\0"+
    "\1\26\1\0\1\26\1\0\4\26\4\0\2\26\1\u0140"+
    "\17\26\3\0\1\26\1\0\1\26\1\0\4\26\23\0"+
    "\1\26\4\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\4\26\4\0\10\26\1\u0141\11\26\3\0\1\26\1\0"+
    "\1\26\1\0\4\26\23\0\1\26\4\0\1\26\1\0"+
    "\1\26\1\0\1\26\1\0\4\26\4\0\17\26\1\u0142"+
    "\2\26\3\0\1\26\1\0\1\26\1\0\4\26\23\0"+
    "\1\26\4\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\4\26\4\0\7\26\1\u0143\12\26\3\0\1\26\1\0"+
    "\1\26\1\0\4\26\23\0\1\26\4\0\1\26\1\0"+
    "\1\26\1\0\1\26\1\0\4\26\4\0\11\26\1\u0144"+
    "\10\26\3\0\1\26\1\0\1\26\1\0\4\26\23\0"+
    "\1\26\4\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\4\26\4\0\5\26\1\u0145\14\26\3\0\1\26\1\0"+
    "\1\26\1\0\4\26\23\0\1\26\4\0\1\26\1\0"+
    "\1\26\1\0\1\26\1\0\4\26\4\0\11\26\1\u0146"+
    "\10\26\3\0\1\26\1\0\1\26\1\0\4\26\23\0"+
    "\1\26\4\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\4\26\4\0\17\26\1\u0147\2\26\3\0\1\26\1\0"+
    "\1\26\1\0\4\26\23\0\1\26\4\0\1\26\1\0"+
    "\1\26\1\0\1\26\1\0\4\26\4\0\17\26\1\u0148"+
    "\2\26\3\0\1\26\1\0\1\26\1\0\4\26\23\0"+
    "\1\26\4\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\4\26\4\0\2\26\1\u0149\17\26\3\0\1\26\1\0"+
    "\1\26\1\0\4\26\23\0\1\26\4\0\1\26\1\0"+
    "\1\26\1\0\1\26\1\0\4\26\4\0\2\26\1\u014a"+
    "\17\26\3\0\1\26\1\0\1\26\1\0\4\26\23\0"+
    "\1\26\4\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\4\26\4\0\1\26\1\u014b\20\26\3\0\1\26\1\0"+
    "\1\26\1\0\4\26\23\0\1\26\4\0\1\26\1\0"+
    "\1\26\1\0\1\26\1\0\4\26\4\0\2\26\1\u014c"+
    "\17\26\3\0\1\26\1\0\1\26\1\0\4\26\23\0"+
    "\1\26\4\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\4\26\4\0\13\26\1\u014d\6\26\3\0\1\26\1\0"+
    "\1\26\1\0\4\26\23\0\1\u014d\4\0\1\26\1\0"+
    "\1\26\1\0\1\26\1\0\4\26\4\0\1\26\1\u014e"+
    "\20\26\3\0\1\26\1\0\1\26\1\0\4\26\23\0"+
    "\1\26\4\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\4\26\4\0\12\26\1\u014f\7\26\3\0\1\26\1\0"+
    "\1\26\1\0\4\26\23\0\1\26\4\0\1\26\1\0"+
    "\1\26\1\0\1\26\1\0\4\26\4\0\14\26\1\u0150"+
    "\5\26\3\0\1\26\1\0\1\26\1\0\4\26\23\0"+
    "\1\26\4\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\4\26\4\0\1\26\1\u0151\20\26\3\0\1\26\1\0"+
    "\1\26\1\0\4\26\23\0\1\26\4\0\1\26\1\0"+
    "\1\26\1\0\1\u0152\1\0\4\26\4\0\22\26\3\0"+
    "\1\26\1\0\1\26\1\0\4\26\23\0\1\26\4\0"+
    "\1\26\1\0\1\26\1\0\1\26\1\0\4\26\4\0"+
    "\22\26\3\0\1\26\1\0\1\26\1\0\1\u0153\3\26"+
    "\23\0\1\26\4\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\4\26\4\0\2\26\1\u0154\17\26\3\0\1\26"+
    "\1\0\1\26\1\0\4\26\23\0\1\26\4\0\1\26"+
    "\22\0\1\u0155\63\0\1\u0156\6\0\1\u0157\32\0\1\u0158"+
    "\44\0\1\u0159\76\0\1\u015a\133\0\1\u015b\51\0\1\u015c"+
    "\115\0\1\u015d\106\0\1\u015e\114\0\1\u015f\47\0\1\26"+
    "\1\0\1\26\1\0\4\26\4\0\17\26\1\u0160\2\26"+
    "\3\0\1\26\1\0\1\26\1\0\4\26\23\0\1\26"+
    "\4\0\1\26\1\0\1\u0132\1\0\1\u0132\1\0\4\u0132"+
    "\1\u0161\2\0\1\u0162\22\u0132\3\0\1\u0132\1\0\1\u0132"+
    "\1\0\4\u0132\23\0\1\u0132\4\0\1\u0132\31\0\1\u0163"+
    "\62\0\1\135\1\136\1\0\1\136\6\0\1\u0164\115\0"+
    "\1\u0165\45\0\1\26\1\0\1\26\1\0\4\26\4\0"+
    "\3\26\1\u0166\16\26\3\0\1\26\1\0\1\26\1\0"+
    "\4\26\23\0\1\26\4\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\4\26\4\0\7\26\1\u0167\12\26\3\0"+
    "\1\26\1\0\1\26\1\0\4\26\23\0\1\26\4\0"+
    "\1\26\1\0\1\26\1\0\1\26\1\0\4\26\4\0"+
    "\12\26\1\u0168\7\26\3\0\1\26\1\0\1\26\1\0"+
    "\4\26\23\0\1\26\4\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\4\26\4\0\14\26\1\u0169\5\26\3\0"+
    "\1\26\1\0\1\26\1\0\4\26\23\0\1\26\4\0"+
    "\1\26\1\0\1\26\1\0\1\26\1\0\4\26\4\0"+
    "\1\26\1\u016a\20\26\3\0\1\26\1\0\1\26\1\0"+
    "\4\26\23\0\1\26\4\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\4\26\4\0\1\26\1\u016b\20\26\3\0"+
    "\1\26\1\0\1\26\1\0\4\26\23\0\1\26\4\0"+
    "\1\26\1\0\1\26\1\0\1\26\1\0\4\26\4\0"+
    "\3\26\1\u016c\16\26\3\0\1\26\1\0\1\26\1\0"+
    "\4\26\23\0\1\26\4\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\4\26\4\0\5\26\1\u016d\14\26\3\0"+
    "\1\26\1\0\1\26\1\0\4\26\23\0\1\26\4\0"+
    "\1\26\1\0\1\26\1\0\1\26\1\0\4\26\4\0"+
    "\14\26\1\u016e\5\26\3\0\1\26\1\0\1\26\1\0"+
    "\4\26\23\0\1\26\4\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\4\26\4\0\10\26\1\u016f\11\26\3\0"+
    "\1\26\1\0\1\26\1\0\4\26\23\0\1\26\4\0"+
    "\1\26\1\0\1\26\1\0\1\u0170\1\0\4\26\4\0"+
    "\22\26\3\0\1\26\1\0\1\26\1\0\4\26\23\0"+
    "\1\26\4\0\1\26\1\0\1\26\1\0\1\u0171\1\0"+
    "\4\26\4\0\22\26\3\0\1\26\1\0\1\26\1\0"+
    "\4\26\23\0\1\26\4\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\4\26\4\0\12\26\1\u0172\7\26\3\0"+
    "\1\26\1\0\1\26\1\0\4\26\23\0\1\26\4\0"+
    "\1\26\1\0\1\26\1\0\1\26\1\0\4\26\4\0"+
    "\13\26\1\u0173\6\26\3\0\1\26\1\0\1\26\1\0"+
    "\4\26\23\0\1\u0173\4\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\4\26\4\0\12\26\1\u0174\7\26\3\0"+
    "\1\26\1\0\1\26\1\0\4\26\23\0\1\26\4\0"+
    "\1\26\1\0\1\26\1\0\1\26\1\0\4\26\4\0"+
    "\1\26\1\u0175\20\26\3\0\1\26\1\0\1\26\1\0"+
    "\4\26\23\0\1\26\4\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\4\26\4\0\11\26\1\u0176\10\26\3\0"+
    "\1\26\1\0\1\26\1\0\4\26\23\0\1\26\4\0"+
    "\1\26\1\0\1\26\1\0\1\26\1\0\4\26\4\0"+
    "\12\26\1\u0177\7\26\3\0\1\26\1\0\1\26\1\0"+
    "\4\26\23\0\1\26\4\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\4\26\4\0\16\26\1\u0178\3\26\3\0"+
    "\1\26\1\0\1\26\1\0\4\26\23\0\1\26\4\0"+
    "\1\26\1\0\1\26\1\0\1\26\1\0\4\26\4\0"+
    "\11\26\1\u0179\10\26\3\0\1\26\1\0\1\26\1\0"+
    "\4\26\23\0\1\26\4\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\4\26\4\0\14\26\1\u017a\5\26\3\0"+
    "\1\26\1\0\1\26\1\0\4\26\23\0\1\26\4\0"+
    "\1\26\3\0\1\u017b\6\0\1\u017c\32\0\1\u017d\101\0"+
    "\1\u017e\50\0\1\u0157\32\0\1\u0158\57\0\1\u017f\107\0"+
    "\1\u0180\72\0\1\u015e\102\0\1\u0181\111\0\1\u0182\66\0"+
    "\1\u015e\32\0\1\u0183\103\0\1\u0184\35\0\1\26\1\0"+
    "\1\26\1\0\4\26\4\0\5\26\1\u0185\14\26\3\0"+
    "\1\26\1\0\1\26\1\0\4\26\23\0\1\26\4\0"+
    "\1\26\14\0\1\u0162\104\0\1\u0186\103\0\1\u0187\102\0"+
    "\1\u0188\64\0\1\26\1\0\1\26\1\0\4\26\4\0"+
    "\13\26\1\u0189\6\26\3\0\1\26\1\0\1\26\1\0"+
    "\4\26\23\0\1\u0189\4\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\4\26\4\0\5\26\1\u018a\14\26\3\0"+
    "\1\26\1\0\1\26\1\0\4\26\23\0\1\26\4\0"+
    "\1\26\1\0\1\26\1\0\1\u018b\1\0\4\26\4\0"+
    "\22\26\3\0\1\26\1\0\1\26\1\0\4\26\23\0"+
    "\1\26\4\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\4\26\4\0\2\26\1\u018c\17\26\3\0\1\26\1\0"+
    "\1\26\1\0\4\26\23\0\1\26\4\0\1\26\1\0"+
    "\1\26\1\0\1\26\1\0\4\26\4\0\5\26\1\u018d"+
    "\14\26\3\0\1\26\1\0\1\26\1\0\4\26\23\0"+
    "\1\26\4\0\1\26\1\0\1\26\1\0\1\u018e\1\0"+
    "\4\26\4\0\22\26\3\0\1\26\1\0\1\26\1\0"+
    "\4\26\23\0\1\26\4\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\4\26\4\0\2\26\1\u018f\17\26\3\0"+
    "\1\26\1\0\1\26\1\0\4\26\23\0\1\26\4\0"+
    "\1\26\1\0\1\26\1\0\1\u0190\1\0\4\26\4\0"+
    "\22\26\3\0\1\26\1\0\1\26\1\0\4\26\23\0"+
    "\1\26\4\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\4\26\4\0\11\26\1\u0191\10\26\3\0\1\26\1\0"+
    "\1\26\1\0\4\26\23\0\1\26\4\0\1\26\1\0"+
    "\1\26\1\0\1\26\1\0\4\26\4\0\6\26\1\u0192"+
    "\13\26\3\0\1\26\1\0\1\26\1\0\4\26\23\0"+
    "\1\26\4\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\4\26\4\0\6\26\1\u0193\13\26\3\0\1\26\1\0"+
    "\1\26\1\0\4\26\23\0\1\26\4\0\1\26\1\0"+
    "\1\26\1\0\1\26\1\0\4\26\4\0\2\26\1\u0194"+
    "\17\26\3\0\1\26\1\0\1\26\1\0\4\26\23\0"+
    "\1\26\4\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\4\26\4\0\13\26\1\u0195\6\26\3\0\1\26\1\0"+
    "\1\26\1\0\4\26\23\0\1\u0195\4\0\1\26\1\0"+
    "\1\26\1\0\1\26\1\0\4\26\4\0\16\26\1\u0196"+
    "\3\26\3\0\1\26\1\0\1\26\1\0\4\26\23\0"+
    "\1\26\4\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\4\26\4\0\4\26\1\u0197\15\26\3\0\1\26\1\0"+
    "\1\26\1\0\4\26\23\0\1\26\4\0\1\26\1\0"+
    "\1\26\1\0\1\26\1\0\4\26\4\0\10\26\1\u0198"+
    "\11\26\3\0\1\26\1\0\1\26\1\0\4\26\23\0"+
    "\1\26\4\0\1\26\1\0\1\26\1\0\1\u0199\1\0"+
    "\4\26\4\0\22\26\3\0\1\26\1\0\1\26\1\0"+
    "\4\26\23\0\1\26\4\0\1\26\34\0\1\u019a\60\0"+
    "\1\u017c\32\0\1\u017d\40\0\1\u019b\102\0\1\u015e\116\0"+
    "\1\u019c\75\0\1\u0181\32\0\1\u019d\101\0\1\u019e\50\0"+
    "\1\u0184\32\0\1\u019f\73\0\1\u01a0\75\0\1\u01a1\62\0"+
    "\2\u01a2\1\0\1\u01a2\67\0\1\26\1\0\1\26\1\0"+
    "\4\26\4\0\17\26\1\u01a3\2\26\3\0\1\26\1\0"+
    "\1\26\1\0\4\26\23\0\1\26\4\0\1\26\1\0"+
    "\1\26\1\0\1\26\1\0\4\26\4\0\17\26\1\u01a4"+
    "\2\26\3\0\1\26\1\0\1\26\1\0\4\26\23\0"+
    "\1\26\4\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\4\26\4\0\12\26\1\u01a5\7\26\3\0\1\26\1\0"+
    "\1\26\1\0\4\26\23\0\1\26\4\0\1\26\1\0"+
    "\1\26\1\0\1\u01a6\1\0\4\26\4\0\22\26\3\0"+
    "\1\26\1\0\1\26\1\0\4\26\23\0\1\26\4\0"+
    "\1\26\1\0\1\26\1\0\1\26\1\0\4\26\4\0"+
    "\6\26\1\u01a7\13\26\3\0\1\26\1\0\1\26\1\0"+
    "\4\26\23\0\1\26\4\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\4\26\4\0\12\26\1\u01a8\7\26\3\0"+
    "\1\26\1\0\1\26\1\0\4\26\23\0\1\26\4\0"+
    "\1\26\1\0\1\26\1\0\1\26\1\0\4\26\4\0"+
    "\6\26\1\u01a9\13\26\3\0\1\26\1\0\1\26\1\0"+
    "\4\26\23\0\1\26\4\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\4\26\4\0\6\26\1\u01aa\13\26\3\0"+
    "\1\26\1\0\1\26\1\0\4\26\23\0\1\26\4\0"+
    "\1\26\1\0\1\26\1\0\1\26\1\0\4\26\4\0"+
    "\1\26\1\u01ab\20\26\3\0\1\26\1\0\1\26\1\0"+
    "\4\26\23\0\1\26\4\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\4\26\4\0\6\26\1\u01ac\13\26\3\0"+
    "\1\26\1\0\1\26\1\0\4\26\23\0\1\26\4\0"+
    "\1\26\1\0\1\26\1\0\1\26\1\0\4\26\4\0"+
    "\11\26\1\u01ad\10\26\3\0\1\26\1\0\1\26\1\0"+
    "\4\26\23\0\1\26\4\0\1\26\1\0\1\26\1\0"+
    "\1\u01ae\1\0\4\26\4\0\22\26\3\0\1\26\1\0"+
    "\1\26\1\0\4\26\23\0\1\26\4\0\1\26\1\0"+
    "\1\26\1\0\1\26\1\0\4\26\4\0\6\26\1\u01af"+
    "\13\26\3\0\1\26\1\0\1\26\1\0\4\26\23\0"+
    "\1\26\4\0\1\26\26\0\1\u017c\105\0\1\u0157\63\0"+
    "\1\u019c\32\0\1\u01b0\47\0\1\u019e\32\0\1\u01b1\54\0"+
    "\1\u01b2\117\0\1\u01b3\57\0\2\u01a2\1\0\1\u01a2\5\0"+
    "\1\u01b4\61\0\1\26\1\0\1\26\1\0\4\26\4\0"+
    "\14\26\1\u01b5\5\26\3\0\1\26\1\0\1\26\1\0"+
    "\4\26\23\0\1\26\4\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\4\26\4\0\12\26\1\u01b6\7\26\3\0"+
    "\1\26\1\0\1\26\1\0\4\26\23\0\1\26\4\0"+
    "\1\26\1\0\1\26\1\0\1\26\1\0\4\26\4\0"+
    "\16\26\1\u01b7\3\26\3\0\1\26\1\0\1\26\1\0"+
    "\4\26\23\0\1\26\4\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\4\26\4\0\4\26\1\u01b8\15\26\3\0"+
    "\1\26\1\0\1\26\1\0\4\26\23\0\1\26\4\0"+
    "\1\26\1\0\1\26\1\0\1\26\1\0\4\26\4\0"+
    "\2\26\1\u01b9\17\26\3\0\1\26\1\0\1\26\1\0"+
    "\4\26\23\0\1\26\4\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\4\26\4\0\4\26\1\u01ba\15\26\3\0"+
    "\1\26\1\0\1\26\1\0\4\26\23\0\1\26\4\0"+
    "\1\26\1\0\1\26\1\0\1\26\1\0\4\26\4\0"+
    "\6\26\1\u01bb\13\26\3\0\1\26\1\0\1\26\1\0"+
    "\4\26\23\0\1\26\4\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\4\26\4\0\4\26\1\u01bc\15\26\3\0"+
    "\1\26\1\0\1\26\1\0\4\26\23\0\1\26\4\0"+
    "\1\26\11\0\2\u01b2\1\0\1\u01b2\23\0\1\252\71\0"+
    "\1\u01bd\107\0\1\u01be\47\0\1\26\1\0\1\u01bf\1\0"+
    "\4\26\4\0\22\26\3\0\1\26\1\0\1\26\1\0"+
    "\4\26\23\0\1\26\4\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\4\26\4\0\16\26\1\u01c0\3\26\3\0"+
    "\1\26\1\0\1\26\1\0\4\26\23\0\1\26\4\0"+
    "\1\26\1\0\1\26\1\0\1\26\1\0\4\26\4\0"+
    "\11\26\1\u01c1\10\26\3\0\1\26\1\0\1\26\1\0"+
    "\4\26\23\0\1\26\4\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\4\26\4\0\1\26\1\u01c2\20\26\3\0"+
    "\1\26\1\0\1\26\1\0\4\26\23\0\1\26\4\0"+
    "\1\26\1\0\1\26\1\0\1\26\1\0\4\26\4\0"+
    "\11\26\1\u01c3\10\26\3\0\1\26\1\0\1\26\1\0"+
    "\4\26\23\0\1\26\4\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\4\26\4\0\11\26\1\u01c4\10\26\3\0"+
    "\1\26\1\0\1\26\1\0\4\26\23\0\1\26\4\0"+
    "\1\26\35\0\1\u01c5\73\0\1\u01c6\55\0\1\26\1\0"+
    "\1\26\1\0\4\26\4\0\12\26\1\u01c7\7\26\3\0"+
    "\1\26\1\0\1\26\1\0\4\26\23\0\1\26\4\0"+
    "\1\26\1\0\1\26\1\0\1\26\1\0\4\26\4\0"+
    "\4\26\1\u01c8\15\26\3\0\1\26\1\0\1\26\1\0"+
    "\4\26\23\0\1\26\4\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\4\26\4\0\6\26\1\u01c9\13\26\3\0"+
    "\1\26\1\0\1\26\1\0\4\26\23\0\1\26\4\0"+
    "\1\26\1\0\1\26\1\0\1\26\1\0\4\26\4\0"+
    "\12\26\1\u01ca\7\26\3\0\1\26\1\0\1\26\1\0"+
    "\4\26\23\0\1\26\4\0\1\26\23\0\1\u01cb\123\0"+
    "\1\u01cc\37\0\1\26\1\0\1\u01cd\1\0\4\26\4\0"+
    "\22\26\3\0\1\26\1\0\1\26\1\0\4\26\23\0"+
    "\1\26\4\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\4\26\4\0\11\26\1\u01ce\10\26\3\0\1\26\1\0"+
    "\1\26\1\0\4\26\23\0\1\26\4\0\1\26\1\0"+
    "\1\26\1\0\1\26\1\0\4\26\4\0\6\26\1\u01cf"+
    "\13\26\3\0\1\26\1\0\1\26\1\0\4\26\23\0"+
    "\1\26\4\0\1\26\1\0\1\26\1\0\1\u01d0\1\0"+
    "\4\26\4\0\22\26\3\0\1\26\1\0\1\26\1\0"+
    "\4\26\23\0\1\26\4\0\1\26\42\0\1\u01d1\65\0"+
    "\1\u01d2\111\0\1\u01d3\102\0\1\u01d4\77\0\1\u01d5\115\0"+
    "\1\u01d6\66\0\1\u01d7\44\0\1\u01d7\10\0\1\u01d8\170\0"+
    "\1\u01d9\22\0\2\u01d8\1\0\1\u01d8\35\0\1\u01da\70\0"+
    "\1\u01db\53\0\2\u01da\1\0\1\u01da\21\0\1\u01dc\37\0"+
    "\1\u01dd\1\u01de\14\0\1\u01df\2\0\1\u01e0\121\0\1\u01e1"+
    "\105\0\1\u01e2\102\0\1\u01e3\60\0\1\u01e0\124\0\1\u01e4"+
    "\77\0\1\u01e5\102\0\1\u01e6\60\0\2\u01e4\1\0\1\u01e4"+
    "\23\0\1\136\100\0\1\u01e7\102\0\1\u01e8\142\0\1\u01e4"+
    "\103\0\1\u01e4\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[25058];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\12\0\2\1\1\11\11\1\1\11\24\1\1\11"+
    "\11\1\5\11\2\1\3\11\2\1\1\11\6\1\2\11"+
    "\3\1\1\11\2\1\1\11\3\1\1\11\1\1\1\11"+
    "\5\1\2\11\1\1\1\0\4\1\1\0\1\11\6\1"+
    "\2\11\1\0\35\1\3\11\1\1\2\11\1\1\12\0"+
    "\1\1\1\11\2\1\2\11\1\1\1\0\3\11\1\1"+
    "\6\11\1\1\1\0\1\11\4\0\1\1\4\11\2\1"+
    "\1\0\1\1\1\11\1\0\2\11\2\0\1\1\1\0"+
    "\44\1\1\11\1\1\11\0\1\1\3\11\2\0\1\1"+
    "\1\11\3\1\2\0\43\1\11\0\1\1\4\0\37\1"+
    "\3\0\1\11\7\0\2\1\1\11\3\0\25\1\2\0"+
    "\1\11\5\0\1\11\1\0\1\1\3\0\21\1\3\0"+
    "\1\11\1\0\1\11\3\0\15\1\2\11\3\0\10\1"+
    "\2\0\6\1\2\0\4\1\2\0\4\1\12\0\1\1"+
    "\3\0\1\1\1\11\10\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[488];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

    // NJ: start of block for more() functionality *******************
    
    private StringBuffer morePrefix;
    private boolean clearMorePrefix;  

    // same functionality as Flex's yymore()
    public void more() {
        this.morePrefix.append(this.yytext());
        this.clearMorePrefix = false;        
    }

    // wrapper around yytext() allowing the usage of more()
    public final String text() {
        return (this.morePrefix.toString() + this.yytext());
    }

    // wrapper around yylength() allowing the usage of more()
    public final int length() {
        return this.morePrefix.length() + this.yylength();
    }

    // wrapper around yycharat() allowing the usage of more()
    public final char charat(int pos) {
        if (pos < this.morePrefix.length()) {
            return this.morePrefix.charAt(pos);
        } else {
            return this.yycharat(pos - this.morePrefix.length());
        }
    }

    // wrapper around yylex() deleting the morePrefix
    public Symbol lex() throws java.io.IOException {
        Symbol ret = this.next_token();
        this.morePrefix.setLength(0);
        this.clearMorePrefix = true;
        return ret;
    }
  
    // NJ: end of block for more() functionality *******************

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

    private LinkedList stateStack;

    private String heredocLabel;

    private String fileName;

    // same functionality as Flex's yy_push_state
    private void pushState(int state) {
        this.stateStack.add(new Integer(this.yystate()));
        yybegin(state);
    }

    // same functionality as Flex's yy_pop_state
    private void popState() {
        yybegin(((Integer) this.stateStack.removeLast()).intValue());
    }

    // same functionality as Flex's yy_top_state
    private int topState() {
        return ((Integer) this.stateStack.getLast()).intValue();
    }

    // shorthand for constructing Symbol objects
    private Symbol symbol(int type, String name) {
        // use the Symbol's "left value" as line number
        int line = yyline + 1;
        return new Symbol(
            type, 
            line, 
            -1, 
            new ParseNode(type, name, this.fileName, text(), line));
    }

    // always call this method after constructing the lexer object
    public void setFileName(String fileName) {
        this.fileName = fileName;
    }

    public String getFileName() {
        if (this.fileName == null) {
            throw new RuntimeException("fileName not set in lexer object");
        }
        return this.fileName;
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public PhpLexer(java.io.Reader in) {
  
    this.stateStack = new LinkedList();

    this.morePrefix = new StringBuffer();
    this.clearMorePrefix = true;
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public PhpLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 192) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    message = message + "; file " + fileName + ", line " + yyline;
    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL[zzMarkedPosL-1]) {
        case '\n':
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 24: 
          { return symbol(PhpSymbols.T_COMMA, "T_COMMA");
          }
        case 147: break;
        case 98: 
          { //return new Yytoken("T_ELSE", text());
    return symbol(PhpSymbols.T_ELSE, "T_ELSE");
          }
        case 148: break;
        case 95: 
          { //return new Yytoken("T_IS_IDENTICAL", text());
    return symbol(PhpSymbols.T_IS_IDENTICAL, "T_IS_IDENTICAL");
          }
        case 149: break;
        case 75: 
          { //return new Yytoken("T_OR_EQUAL", text());
    return symbol(PhpSymbols.T_OR_EQUAL, "T_OR_EQUAL");
          }
        case 150: break;
        case 47: 
          { more();
          }
        case 151: break;
        case 107: 
          { //return new Yytoken("T_UNSET", text());
    return symbol(PhpSymbols.T_UNSET, "T_UNSET");
          }
        case 152: break;
        case 17: 
          { return symbol(PhpSymbols.T_MULT, "T_MULT");
          }
        case 153: break;
        case 142: 
          { //return new Yytoken("T_INCLUDE_ONCE", text());
    return symbol(PhpSymbols.T_INCLUDE_ONCE, "T_INCLUDE_ONCE");
          }
        case 154: break;
        case 100: 
          { //return new Yytoken("T_EVAL", text());
    return symbol(PhpSymbols.T_EVAL, "T_EVAL");
          }
        case 155: break;
        case 64: 
          { //return new Yytoken("T_IS_EQUAL", text());
    return symbol(PhpSymbols.T_IS_EQUAL, "T_IS_EQUAL");
          }
        case 156: break;
        case 122: 
          { //return new Yytoken("T_GLOBAL", text());
    return symbol(PhpSymbols.T_GLOBAL, "T_GLOBAL");
          }
        case 157: break;
        case 53: 
          { //return new Yytoken("T_IF", text());
    return symbol(PhpSymbols.T_IF, "T_IF");
          }
        case 158: break;
        case 68: 
          { //return new Yytoken("T_MUL_EQUAL", text());
    return symbol(PhpSymbols.T_MUL_EQUAL, "T_MUL_EQUAL");
          }
        case 159: break;
        case 86: 
          { yybegin(ST_IN_SCRIPTING);
    //return new Yytoken("T_ECHO", text());
    return symbol(PhpSymbols.T_ECHO, "T_ECHO");
          }
        case 160: break;
        case 42: 
          { yybegin(ST_IN_SCRIPTING);
    //return new Yytoken("`", text());
    return symbol(PhpSymbols.T_BACKTICK, "T_BACKTICK");
          }
        case 161: break;
        case 5: 
          { //return new Yytoken("T_STRING", text());
    return symbol(PhpSymbols.T_STRING, "T_STRING");
          }
        case 162: break;
        case 81: 
          { pushState(ST_LOOKING_FOR_VARNAME);
    //return new Yytoken("T_DOLLAR_OPEN_CURLY_BRACES", text());
    return symbol(PhpSymbols.T_DOLLAR_OPEN_CURLY_BRACES, "T_DOLLAR_OPEN_CURLY_BRACES");
          }
        case 163: break;
        case 125: 
          { //return new Yytoken("T_DEFAULT", text());
    return symbol(PhpSymbols.T_DEFAULT, "T_DEFAULT");
          }
        case 164: break;
        case 35: 
          { yybegin(ST_BACKQUOTE);
    //return new Yytoken("`", text());
    return symbol(PhpSymbols.T_BACKTICK, "T_BACKTICK");
          }
        case 165: break;
        case 130: 
          { //return new Yytoken("T_ARRAY_CAST", text());
    return symbol(PhpSymbols.T_ARRAY_CAST, "T_ARRAY_CAST");
          }
        case 166: break;
        case 113: 
          { //return new Yytoken("T_INT_CAST", text());
    return symbol(PhpSymbols.T_INT_CAST, "T_INT_CAST");
          }
        case 167: break;
        case 26: 
          { return symbol(PhpSymbols.T_CLOSE_RECT_BRACES, "T_CLOSE_RECT_BRACES");
          }
        case 168: break;
        case 123: 
          { //return new Yytoken("T_EXTENDS", text());
    return symbol(PhpSymbols.T_EXTENDS, "T_EXTENDS");
          }
        case 169: break;
        case 56: 
          { //return new Yytoken("T_AS", text());
    return symbol(PhpSymbols.T_AS, "T_AS");
          }
        case 170: break;
        case 131: 
          { //return new Yytoken("T_ENDWHILE", text());
    return symbol(PhpSymbols.T_ENDWHILE, "T_ENDWHILE");
          }
        case 171: break;
        case 146: 
          { //return new Yytoken("T_INLINE_HTML", text());
    return symbol(PhpSymbols.T_INLINE_HTML, "T_INLINE_HTML");
          }
        case 172: break;
        case 65: 
          { //return new Yytoken("T_IS_NOT_EQUAL", text());
    return symbol(PhpSymbols.T_IS_NOT_EQUAL, "T_IS_NOT_EQUAL");
          }
        case 173: break;
        case 132: 
          { //return new Yytoken("T_LINE", text());
    return symbol(PhpSymbols.T_LINE, "T_LINE");
          }
        case 174: break;
        case 74: 
          { //return new Yytoken("T_BOOLEAN_AND", text());
    return symbol(PhpSymbols.T_BOOLEAN_AND, "T_BOOLEAN_AND");
          }
        case 175: break;
        case 12: 
          { return symbol(PhpSymbols.T_OPEN_BRACES, "T_OPEN_BRACES");
          }
        case 176: break;
        case 22: 
          { return symbol(PhpSymbols.T_BITWISE_XOR, "T_BITWISE_XOR");
          }
        case 177: break;
        case 49: 
          { //return new Yytoken("T_DNUMBER", text());
    return symbol(PhpSymbols.T_DNUMBER, "T_DNUMBER");
          }
        case 178: break;
        case 144: 
          { //return new Yytoken("T_FUNC_C", text());
    return symbol(PhpSymbols.T_FUNC_C, "T_FUNC_C");
          }
        case 179: break;
        case 57: 
          { //return new Yytoken("T_DEC", text());
    return symbol(PhpSymbols.T_DEC, "T_DEC");
          }
        case 180: break;
        case 25: 
          { return symbol(PhpSymbols.T_OPEN_RECT_BRACES, "T_OPEN_RECT_BRACES");
          }
        case 181: break;
        case 143: 
          { //return new Yytoken("T_OLD_FUNCTION", text());
    return symbol(PhpSymbols.T_OLD_FUNCTION, "T_OLD_FUNCTION");
          }
        case 182: break;
        case 72: 
          { //return new Yytoken("T_MOD_EQUAL", text());
    return symbol(PhpSymbols.T_MOD_EQUAL, "T_MOD_EQUAL");
          }
        case 183: break;
        case 133: 
          { //return new Yytoken("T_FILE", text());
    return symbol(PhpSymbols.T_FILE, "T_FILE");
          }
        case 184: break;
        case 88: 
          { //return new Yytoken("T_EXIT", text());
    return symbol(PhpSymbols.T_EXIT, "T_EXIT");
          }
        case 185: break;
        case 145: 
          { //return new Yytoken("T_REQUIRE_ONCE", text());
    return symbol(PhpSymbols.T_REQUIRE_ONCE, "T_REQUIRE_ONCE");
          }
        case 186: break;
        case 29: 
          { return symbol(PhpSymbols.T_QUESTION, "T_QUESTION");
          }
        case 187: break;
        case 114: 
          { // start of heredoc

    // determine heredoc label and save it for later use
    this.heredocLabel = text().substring(3).trim();

    yybegin(ST_HEREDOC);
    //return new Yytoken("T_START_HEREDOC", text());
    return symbol(PhpSymbols.T_START_HEREDOC, "T_START_HEREDOC");
          }
        case 188: break;
        case 45: 
          { yypushback(length());
	popState();
	pushState(ST_IN_SCRIPTING);
          }
        case 189: break;
        case 2: 
          { System.err.println("read ANY_CHAR at wrong place:");
    System.err.println("line " + yyline + ", column " + yycolumn);
    System.err.println("character: " + text());
    return null;
          }
        case 190: break;
        case 34: 
          { yybegin(ST_SINGLE_QUOTE);
    //return new Yytoken("'", text());
    return symbol(PhpSymbols.T_SINGLE_QUOTE, "T_SINGLE_QUOTE");
          }
        case 191: break;
        case 70: 
          { yybegin(ST_COMMENT);
	more();
          }
        case 192: break;
        case 120: 
          { //return new Yytoken("T_BOOL_CAST", text());
    return symbol(PhpSymbols.T_BOOL_CAST, "T_BOOL_CAST");
          }
        case 193: break;
        case 127: 
          { //return new Yytoken("T_FOREACH", text());
    return symbol(PhpSymbols.T_FOREACH, "T_FOREACH");
          }
        case 194: break;
        case 109: 
          { //return new Yytoken("T_CLASS", text());
    return symbol(PhpSymbols.T_CLASS, "T_CLASS");
          }
        case 195: break;
        case 94: 
          { //return new Yytoken("T_VAR", text());
    return symbol(PhpSymbols.T_VAR, "T_VAR");
          }
        case 196: break;
        case 13: 
          { return symbol(PhpSymbols.T_CLOSE_BRACES, "T_CLOSE_BRACES");
          }
        case 197: break;
        case 31: 
          { pushState(ST_IN_SCRIPTING);
    //return new Yytoken("{", text());
    return symbol(PhpSymbols.T_OPEN_CURLY_BRACES, "T_OPEN_CURLY_BRACES");
          }
        case 198: break;
        case 137: 
          { //return new Yytoken("T_STRING_CAST", text());
    return symbol(PhpSymbols.T_STRING_CAST, "T_STRING_CAST");
          }
        case 199: break;
        case 8: 
          { yybegin(ST_ONE_LINE_COMMENT);
	more();
          }
        case 200: break;
        case 140: 
          { //return new Yytoken("T_ENDDECLARE", text());
    return symbol(PhpSymbols.T_ENDDECLARE, "T_ENDDECLARE");
          }
        case 201: break;
        case 83: 
          { //return new Yytoken("T_CHARACTER", text());
    return symbol(PhpSymbols.T_CHARACTER, "T_CHARACTER");
          }
        case 202: break;
        case 138: 
          { //return new Yytoken("T_ENDSWITCH", text());
    return symbol(PhpSymbols.T_ENDSWITCH, "T_ENDSWITCH");
          }
        case 203: break;
        case 90: 
          { //return new Yytoken("T_USE", text());
    return symbol(PhpSymbols.T_USE, "T_USE");
          }
        case 204: break;
        case 9: 
          { return symbol(PhpSymbols.T_MINUS, "T_MINUS");
          }
        case 205: break;
        case 71: 
          { yybegin(YYINITIAL);
    //return new Yytoken(";", text());
    return symbol(PhpSymbols.T_SEMICOLON, "T_SEMICOLON");
          }
        case 206: break;
        case 92: 
          { //return new Yytoken("T_LOGICAL_AND", text());
    return symbol(PhpSymbols.T_LOGICAL_AND, "T_LOGICAL_AND");
          }
        case 207: break;
        case 15: 
          { return symbol(PhpSymbols.T_NOT, "T_NOT");
          }
        case 208: break;
        case 52: 
          { //return new Yytoken("T_PLUS_EQUAL", text());
    return symbol(PhpSymbols.T_PLUS_EQUAL, "T_PLUS_EQUAL");
          }
        case 209: break;
        case 19: 
          { return symbol(PhpSymbols.T_MODULO, "T_MODULO");
          }
        case 210: break;
        case 69: 
          { //return new Yytoken("T_DIV_EQUAL", text());
    return symbol(PhpSymbols.T_DIV_EQUAL, "T_DIV_EQUAL");
          }
        case 211: break;
        case 96: 
          { //return new Yytoken("T_IS_NOT_IDENTICAL", text());
    return symbol(PhpSymbols.T_IS_NOT_IDENTICAL, "T_IS_NOT_IDENTICAL");
          }
        case 212: break;
        case 60: 
          { //return new Yytoken("T_SR", text());
    return symbol(PhpSymbols.T_SR, "T_SR");
          }
        case 213: break;
        case 55: 
          { //return new Yytoken("T_LOGICAL_OR", text());
    return symbol(PhpSymbols.T_LOGICAL_OR, "T_LOGICAL_OR");
          }
        case 214: break;
        case 21: 
          { return symbol(PhpSymbols.T_BITWISE_OR, "T_BITWISE_OR");
          }
        case 215: break;
        case 106: 
          { //return new Yytoken("T_ISSET", text());
    return symbol(PhpSymbols.T_ISSET, "T_ISSET");
          }
        case 216: break;
        case 82: 
          { pushState(ST_IN_SCRIPTING);
	yypushback(1);
    //return new Yytoken("T_CURLY_OPEN", text());
    return symbol(PhpSymbols.T_CURLY_OPEN, "T_CURLY_OPEN");
          }
        case 217: break;
        case 89: 
          { //return new Yytoken("T_FOR", text());
    return symbol(PhpSymbols.T_FOR, "T_FOR");
          }
        case 218: break;
        case 46: 
          { popState();
	pushState(ST_IN_SCRIPTING);
    //return new Yytoken("T_STRING_VARNAME", text());
    return symbol(PhpSymbols.T_STRING_VARNAME, "T_STRING_VARNAME");
          }
        case 219: break;
        case 3: 
          { //return new Yytoken("T_LNUMBER", text());
    return symbol(PhpSymbols.T_LNUMBER, "T_LNUMBER");
          }
        case 220: break;
        case 116: 
          { //return new Yytoken("T_ENDFOR", text());
    return symbol(PhpSymbols.T_ENDFOR, "T_ENDFOR");
          }
        case 221: break;
        case 50: 
          { //return new Yytoken("T_CONCAT_EQUAL", text());
    return symbol(PhpSymbols.T_CONCAT_EQUAL, "T_CONCAT_EQUAL");
          }
        case 222: break;
        case 128: 
          { //return new Yytoken("T_REQUIRE", text());
    return symbol(PhpSymbols.T_REQUIRE, "T_REQUIRE");
          }
        case 223: break;
        case 115: 
          { //return new Yytoken("T_ELSEIF", text());
    return symbol(PhpSymbols.T_ELSEIF, "T_ELSEIF");
          }
        case 224: break;
        case 16: 
          { return symbol(PhpSymbols.T_IS_SMALLER, "T_IS_SMALLER");
          }
        case 225: break;
        case 73: 
          { //return new Yytoken("T_AND_EQUAL", text());
    return symbol(PhpSymbols.T_AND_EQUAL, "T_AND_EQUAL");
          }
        case 226: break;
        case 61: 
          { //return new Yytoken("T_IS_GREATER_OR_EQUAL", text());
    return symbol(PhpSymbols.T_IS_GREATER_OR_EQUAL, "T_IS_GREATER_OR_EQUAL");
          }
        case 227: break;
        case 63: 
          { //return new Yytoken("T_DOUBLE_ARROW", text());
    return symbol(PhpSymbols.T_DOUBLE_ARROW, "T_DOUBLE_ARROW");
          }
        case 228: break;
        case 129: 
          { //return new Yytoken("T_UNSET_CAST", text());
    return symbol(PhpSymbols.T_UNSET_CAST, "T_UNSET_CAST");
          }
        case 229: break;
        case 30: 
          { return symbol(PhpSymbols.T_AT, "T_AT");
          }
        case 230: break;
        case 10: 
          { return symbol(PhpSymbols.T_IS_GREATER, "T_IS_GREATER");
          }
        case 231: break;
        case 78: 
          { //return new Yytoken("T_VARIABLE", text());
    return symbol(PhpSymbols.T_VARIABLE, "T_VARIABLE");
          }
        case 232: break;
        case 48: 
          { yybegin(ST_IN_SCRIPTING);
          }
        case 233: break;
        case 23: 
          { return symbol(PhpSymbols.T_SEMICOLON, "T_SEMICOLON");
          }
        case 234: break;
        case 80: 
          { if (length() == 2) {
		yypushback(1);
	}
    //return new Yytoken("T_CHARACTER", text());
    return symbol(PhpSymbols.T_CHARACTER, "T_CHARACTER");
          }
        case 235: break;
        case 18: 
          { return symbol(PhpSymbols.T_DIV, "T_DIV");
          }
        case 236: break;
        case 76: 
          { //return new Yytoken("T_BOOLEAN_OR", text());
    return symbol(PhpSymbols.T_BOOLEAN_OR, "T_BOOLEAN_OR");
          }
        case 237: break;
        case 33: 
          { yybegin(ST_DOUBLE_QUOTES);
    //return new Yytoken("\"", text());
    return symbol(PhpSymbols.T_DOUBLE_QUOTE, "T_DOUBLE_QUOTE");
          }
        case 238: break;
        case 101: 
          { //return new Yytoken("T_LIST", text());
    return symbol(PhpSymbols.T_LIST, "T_LIST");
          }
        case 239: break;
        case 111: 
          { //return new Yytoken("T_ARRAY", text());
    return symbol(PhpSymbols.T_ARRAY, "T_ARRAY");
          }
        case 240: break;
        case 126: 
          { //return new Yytoken("T_DECLARE", text());
    return symbol(PhpSymbols.T_DECLARE, "T_DECLARE");
          }
        case 241: break;
        case 112: 
          { //return new Yytoken("T_PRINT", text());
    return symbol(PhpSymbols.T_PRINT, "T_PRINT");
          }
        case 242: break;
        case 37: 
          { //return new Yytoken("T_ENCAPSED_AND_WHITESPACE", text());
    return symbol(PhpSymbols.T_ENCAPSED_AND_WHITESPACE, "T_ENCAPSED_AND_WHITESPACE");
          }
        case 243: break;
        case 66: 
          { //return new Yytoken("T_IS_SMALLER_OR_EQUAL", text());
    return symbol(PhpSymbols.T_IS_SMALLER_OR_EQUAL, "T_IS_SMALLER_OR_EQUAL");
          }
        case 244: break;
        case 135: 
          { //return new Yytoken("T_CONTINUE", text());
    return symbol(PhpSymbols.T_CONTINUE, "T_CONTINUE");
          }
        case 245: break;
        case 91: 
          { //return new Yytoken("T_NEW", text());
    return symbol(PhpSymbols.T_NEW, "T_NEW");
          }
        case 246: break;
        case 58: 
          { pushState(ST_LOOKING_FOR_PROPERTY);
    //return new Yytoken("T_OBJECT_OPERATOR", text());
    return symbol(PhpSymbols.T_OBJECT_OPERATOR, "T_OBJECT_OPERATOR");
          }
        case 247: break;
        case 27: 
          { return symbol(PhpSymbols.T_BITWISE_NOT, "T_BITWISE_NOT");
          }
        case 248: break;
        case 39: 
          { return symbol(PhpSymbols.T_CLOSE_CURLY_BRACES, "T_CLOSE_CURLY_BRACES");
          }
        case 249: break;
        case 110: 
          { //return new Yytoken("T_WHILE", text());
    return symbol(PhpSymbols.T_WHILE, "T_WHILE");
          }
        case 250: break;
        case 62: 
          { //return new Yytoken("T_PAAMAYIM_NEKUDOTAYIM", text());
    return symbol(PhpSymbols.T_PAAMAYIM_NEKUDOTAYIM, "T_PAAMAYIM_NEKUDOTAYIM");
          }
        case 251: break;
        case 77: 
          { //return new Yytoken("T_XOR_EQUAL", text());
    return symbol(PhpSymbols.T_XOR_EQUAL, "T_XOR_EQUAL");
          }
        case 252: break;
        case 79: 
          { //return new Yytoken("T_CONSTANT_ENCAPSED_STRING", text());
    return symbol(PhpSymbols.T_CONSTANT_ENCAPSED_STRING, "T_CONSTANT_ENCAPSED_STRING");
          }
        case 253: break;
        case 141: 
          { //return new Yytoken("T_ENDFOREACH", text());
    return symbol(PhpSymbols.T_ENDFOREACH, "T_ENDFOREACH");
          }
        case 254: break;
        case 103: 
          { //return new Yytoken("T_ENDIF", text());
    return symbol(PhpSymbols.T_ENDIF, "T_ENDIF");
          }
        case 255: break;
        case 51: 
          { //return new Yytoken("T_INC", text());
    return symbol(PhpSymbols.T_INC, "T_INC");
          }
        case 256: break;
        case 6: 
          { return symbol(PhpSymbols.T_PLUS, "T_PLUS");
          }
        case 257: break;
        case 104: 
          { //return new Yytoken("T_EMPTY", text());
    return symbol(PhpSymbols.T_EMPTY, "T_EMPTY");
          }
        case 258: break;
        case 38: 
          { return symbol(PhpSymbols.T_OPEN_CURLY_BRACES, "T_OPEN_CURLY_BRACES");
          }
        case 259: break;
        case 40: 
          { yybegin(ST_IN_SCRIPTING);
    //return new Yytoken("\"", text());
    return symbol(PhpSymbols.T_DOUBLE_QUOTE, "T_DOUBLE_QUOTE");
          }
        case 260: break;
        case 11: 
          { return symbol(PhpSymbols.T_COLON, "T_COLON");
          }
        case 261: break;
        case 99: 
          { //return new Yytoken("T_ECHO", text());
    return symbol(PhpSymbols.T_ECHO, "T_ECHO");
          }
        case 262: break;
        case 97: 
          { //return new Yytoken("T_SL_EQUAL", text());
    return symbol(PhpSymbols.T_SL_EQUAL, "T_SL_EQUAL");
          }
        case 263: break;
        case 44: 
          { popState();
    //return new Yytoken("T_STRING", text());
    return symbol(PhpSymbols.T_STRING, "T_STRING");
          }
        case 264: break;
        case 119: 
          { //return new Yytoken("T_RETURN", text());
    return symbol(PhpSymbols.T_RETURN, "T_RETURN");
          }
        case 265: break;
        case 117: 
          { //return new Yytoken("T_STATIC", text());
    return symbol(PhpSymbols.T_STATIC, "T_STATIC");
          }
        case 266: break;
        case 36: 
          { //return new Yytoken("T_NUM_STRING", text());
    return symbol(PhpSymbols.T_NUM_STRING, "T_NUM_STRING");
          }
        case 267: break;
        case 84: 
          { // possible end of heredoc (depending on label)

    // determine supposed end label (and if there is a semicolon or not)
    String supposedLabel = text().trim();
    boolean semicolon = false;
    if (supposedLabel.charAt(supposedLabel.length() - 1) == ';') {
        semicolon = true;
        supposedLabel = supposedLabel.substring(0, supposedLabel.length() - 1);
    }

    if (supposedLabel.equals(this.heredocLabel)) {
        // the end label matches the start label

        if (semicolon) {
            yypushback(length() - supposedLabel.length());
        }
       
		yybegin(ST_IN_SCRIPTING);
    //return new Yytoken("T_END_HEREDOC", text());
    return symbol(PhpSymbols.T_END_HEREDOC, "T_END_HEREDOC");

    } else {
        // the end label doesn't match the start label
    //return new Yytoken("T_STRING", text());
    return symbol(PhpSymbols.T_STRING, "T_STRING");
    }
          }
        case 268: break;
        case 87: 
          { //return new Yytoken("T_LOGICAL_XOR", text());
    return symbol(PhpSymbols.T_LOGICAL_XOR, "T_LOGICAL_XOR");
          }
        case 269: break;
        case 102: 
          { //return new Yytoken("T_CASE", text());
    return symbol(PhpSymbols.T_CASE, "T_CASE");
          }
        case 270: break;
        case 20: 
          { return symbol(PhpSymbols.T_BITWISE_AND, "T_BITWISE_AND");
          }
        case 271: break;
        case 28: 
          { return symbol(PhpSymbols.T_DOLLAR, "T_DOLLAR");
          }
        case 272: break;
        case 134: 
          { //return new Yytoken("T_FUNCTION", text());
    return symbol(PhpSymbols.T_FUNCTION, "T_FUNCTION");
          }
        case 273: break;
        case 7: 
          { // don't return this token, since the parser has no rule for it;
    // in the orignal PHP sources, this filtering is not performed inside
    // the lexer, but by a function that is located between the parser and
    // the lexer (this function has the name zendlex())
	// return T_WHITESPACE;
          }
        case 274: break;
        case 67: 
          { //return new Yytoken("T_SL", text());
    return symbol(PhpSymbols.T_SL, "T_SL");
          }
        case 275: break;
        case 139: 
          { //return new Yytoken("T_CLASS_C", text());
    return symbol(PhpSymbols.T_CLASS_C, "T_CLASS_C");
          }
        case 276: break;
        case 54: 
          { //return new Yytoken("T_DO", text());
    return symbol(PhpSymbols.T_DO, "T_DO");
          }
        case 277: break;
        case 41: 
          { yybegin(ST_IN_SCRIPTING);
    //return new Yytoken("'", text());
    return symbol(PhpSymbols.T_SINGLE_QUOTE, "T_SINGLE_QUOTE");
          }
        case 278: break;
        case 124: 
          { //return new Yytoken("T_INCLUDE", text());
    return symbol(PhpSymbols.T_INCLUDE, "T_INCLUDE");
          }
        case 279: break;
        case 108: 
          { //return new Yytoken("T_CONST", text());
    return symbol(PhpSymbols.T_CONST, "T_CONST");
          }
        case 280: break;
        case 4: 
          { return symbol(PhpSymbols.T_POINT, "T_POINT");
          }
        case 281: break;
        case 1: 
          { // NJ: replaced {1,400} by * (because it's faster)
    //return new Yytoken("T_INLINE_HTML", text());
    return symbol(PhpSymbols.T_INLINE_HTML, "T_INLINE_HTML");
          }
        case 282: break;
        case 121: 
          { //return new Yytoken("T_DOUBLE_CAST", text());
    return symbol(PhpSymbols.T_DOUBLE_CAST, "T_DOUBLE_CAST");
          }
        case 283: break;
        case 105: 
          { //return new Yytoken("T_BREAK", text());
    return symbol(PhpSymbols.T_BREAK, "T_BREAK");
          }
        case 284: break;
        case 136: 
          { //return new Yytoken("T_OBJECT_CAST", text());
    return symbol(PhpSymbols.T_OBJECT_CAST, "T_OBJECT_CAST");
          }
        case 285: break;
        case 14: 
          { return symbol(PhpSymbols.T_ASSIGN, "T_ASSIGN");
          }
        case 286: break;
        case 93: 
          { //return new Yytoken("T_SR_EQUAL", text());
    return symbol(PhpSymbols.T_SR_EQUAL, "T_SR_EQUAL");
          }
        case 287: break;
        case 85: 
          { // yypushback(length() - 2);
    yypushback(2);
    yybegin(ST_IN_SCRIPTING);
          }
        case 288: break;
        case 59: 
          { //return new Yytoken("T_MINUS_EQUAL", text());
    return symbol(PhpSymbols.T_MINUS_EQUAL, "T_MINUS_EQUAL");
          }
        case 289: break;
        case 118: 
          { //return new Yytoken("T_SWITCH", text());
    return symbol(PhpSymbols.T_SWITCH, "T_SWITCH");
          }
        case 290: break;
        case 43: 
          { yypushback(length());
	popState();
          }
        case 291: break;
        case 32: 
          { // TODO: could make problems
	// if (yy_start_stack_ptr) {
	//	yy_pop_state();
	// }
    
//    System.out.println("POPPING STATE!!!");
    popState();
    //return new Yytoken("}", text());
    return symbol(PhpSymbols.T_CLOSE_CURLY_BRACES, "T_CLOSE_CURLY_BRACES");
          }
        case 292: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            switch (zzLexicalState) {
            case ST_IN_SCRIPTING: {
              return null;
            }
            case 489: break;
            case ST_LOOKING_FOR_PROPERTY: {
              return null;
            }
            case 490: break;
            case ST_COMMENT: {
              System.err.println("EOF inside comment!");
    return null;
            }
            case 491: break;
            case ST_BACKQUOTE: {
              return null;
            }
            case 492: break;
            case ST_DOUBLE_QUOTES: {
              return null;
            }
            case 493: break;
            case YYINITIAL: {
              return null;
            }
            case 494: break;
            default:
              { return new java_cup.runtime.Symbol(PhpSymbols.EOF); }
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
      // NJ: included to support more() operation;
      // CAUTION: still a hack, works only with the right input file
      if (this.clearMorePrefix) {
          // clear prefix
          this.morePrefix.setLength(0);
      } else {
          // reset clearMorePrefix (was set to false by call to more())
          this.clearMorePrefix = true;
      }
      
    }
  }


}
